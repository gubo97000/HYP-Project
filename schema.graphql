"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `Event`.
  """
  events(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Event`.
    """
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition
  ): EventsConnection

  """
  Reads and enables pagination through a set of `Itinerary`.
  """
  itineraries(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Itinerary`.
    """
    orderBy: [ItinerariesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItineraryCondition
  ): ItinerariesConnection

  """
  Reads and enables pagination through a set of `Picture`.
  """
  pictures(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Picture`.
    """
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PictureCondition
  ): PicturesConnection

  """
  Reads and enables pagination through a set of `PoiItinerary`.
  """
  poiItineraries(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `PoiItinerary`.
    """
    orderBy: [PoiItinerariesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PoiItineraryCondition
  ): PoiItinerariesConnection

  """
  Reads and enables pagination through a set of `Pois`.
  """
  poises(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Pois`.
    """
    orderBy: [PoisOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PoisCondition
  ): PoisConnection

  """
  Reads and enables pagination through a set of `Service`.
  """
  services(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Service`.
    """
    orderBy: [ServicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceCondition
  ): ServicesConnection

  """
  Reads and enables pagination through a set of `Servicetype`.
  """
  servicetypes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Servicetype`.
    """
    orderBy: [ServicetypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServicetypeCondition
  ): ServicetypesConnection
  event(id: Int!): Event
  itinerary(id: Int!): Itinerary
  picture(id: Int!): Picture
  poiItinerary(itineraryId: Int!, poiId: Int!): PoiItinerary
  pois(id: Int!): Pois
  service(id: Int!): Service
  servicetype(id: Int!): Servicetype

  """
  Reads a single `Event` using its globally unique `ID`.
  """
  eventByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Event`.
    """
    nodeId: ID!
  ): Event

  """
  Reads a single `Itinerary` using its globally unique `ID`.
  """
  itineraryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Itinerary`.
    """
    nodeId: ID!
  ): Itinerary

  """
  Reads a single `Picture` using its globally unique `ID`.
  """
  pictureByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Picture`.
    """
    nodeId: ID!
  ): Picture

  """
  Reads a single `PoiItinerary` using its globally unique `ID`.
  """
  poiItineraryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PoiItinerary`.
    """
    nodeId: ID!
  ): PoiItinerary

  """
  Reads a single `Pois` using its globally unique `ID`.
  """
  poisByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Pois`.
    """
    nodeId: ID!
  ): Pois

  """
  Reads a single `Service` using its globally unique `ID`.
  """
  serviceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Service`.
    """
    nodeId: ID!
  ): Service

  """
  Reads a single `Servicetype` using its globally unique `ID`.
  """
  servicetypeByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Servicetype`.
    """
    nodeId: ID!
  ): Servicetype
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A connection to a list of `Event` values.
"""
type EventsConnection {
  """
  A list of `Event` objects.
  """
  nodes: [Event!]!

  """
  A list of edges which contains the `Event` and cursor to aid in pagination.
  """
  edges: [EventsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Event` you could get from the connection.
  """
  totalCount: Int!
}

type Event implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String
  info: String
  description: String
  createdAt: Datetime!
  updatedAt: Datetime!
  poiId: Int

  """
  Reads a single `Pois` that is related to this `Event`.
  """
  poi: Pois

  """
  Reads and enables pagination through a set of `Picture`.
  """
  pictures(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Picture`.
    """
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PictureCondition
  ): PicturesConnection!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Pois implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String
  info: String
  description: String
  coordinates: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads and enables pagination through a set of `Event`.
  """
  eventsByPoiId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Event`.
    """
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition
  ): EventsConnection!

  """
  Reads and enables pagination through a set of `Picture`.
  """
  picturesByPoiId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Picture`.
    """
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PictureCondition
  ): PicturesConnection!

  """
  Reads and enables pagination through a set of `PoiItinerary`.
  """
  poiItinerariesByPoiId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `PoiItinerary`.
    """
    orderBy: [PoiItinerariesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PoiItineraryCondition
  ): PoiItinerariesConnection!
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
Methods to use when ordering `Event`.
"""
enum EventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  INFO_ASC
  INFO_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  POI_ID_ASC
  POI_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `title` field.
  """
  title: String

  """
  Checks for equality with the object’s `info` field.
  """
  info: String

  """
  Checks for equality with the object’s `description` field.
  """
  description: String

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `poiId` field.
  """
  poiId: Int
}

"""
A connection to a list of `Picture` values.
"""
type PicturesConnection {
  """
  A list of `Picture` objects.
  """
  nodes: [Picture!]!

  """
  A list of edges which contains the `Picture` and cursor to aid in pagination.
  """
  edges: [PicturesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Picture` you could get from the connection.
  """
  totalCount: Int!
}

type Picture implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  url: String
  createdAt: Datetime!
  updatedAt: Datetime!
  eventId: Int
  poiId: Int

  """
  Reads a single `Event` that is related to this `Picture`.
  """
  event: Event

  """
  Reads a single `Pois` that is related to this `Picture`.
  """
  poi: Pois
}

"""
A `Picture` edge in the connection.
"""
type PicturesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Picture` at the end of the edge.
  """
  node: Picture!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
Methods to use when ordering `Picture`.
"""
enum PicturesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  URL_ASC
  URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  POI_ID_ASC
  POI_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Picture` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PictureCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `url` field.
  """
  url: String

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `eventId` field.
  """
  eventId: Int

  """
  Checks for equality with the object’s `poiId` field.
  """
  poiId: Int
}

"""
A connection to a list of `PoiItinerary` values.
"""
type PoiItinerariesConnection {
  """
  A list of `PoiItinerary` objects.
  """
  nodes: [PoiItinerary!]!

  """
  A list of edges which contains the `PoiItinerary` and cursor to aid in pagination.
  """
  edges: [PoiItinerariesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `PoiItinerary` you could get from the connection.
  """
  totalCount: Int!
}

type PoiItinerary implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  order: Int
  createdAt: Datetime!
  updatedAt: Datetime!
  itineraryId: Int!
  poiId: Int!

  """
  Reads a single `Itinerary` that is related to this `PoiItinerary`.
  """
  itinerary: Itinerary

  """
  Reads a single `Pois` that is related to this `PoiItinerary`.
  """
  poi: Pois
}

type Itinerary implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String
  duration: String
  description: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads and enables pagination through a set of `PoiItinerary`.
  """
  poiItineraries(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `PoiItinerary`.
    """
    orderBy: [PoiItinerariesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PoiItineraryCondition
  ): PoiItinerariesConnection!
}

"""
Methods to use when ordering `PoiItinerary`.
"""
enum PoiItinerariesOrderBy {
  NATURAL
  ORDER_ASC
  ORDER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ITINERARY_ID_ASC
  ITINERARY_ID_DESC
  POI_ID_ASC
  POI_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PoiItinerary` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PoiItineraryCondition {
  """
  Checks for equality with the object’s `order` field.
  """
  order: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `itineraryId` field.
  """
  itineraryId: Int

  """
  Checks for equality with the object’s `poiId` field.
  """
  poiId: Int
}

"""
A `PoiItinerary` edge in the connection.
"""
type PoiItinerariesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `PoiItinerary` at the end of the edge.
  """
  node: PoiItinerary!
}

"""
A `Event` edge in the connection.
"""
type EventsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Event` at the end of the edge.
  """
  node: Event!
}

"""
A connection to a list of `Itinerary` values.
"""
type ItinerariesConnection {
  """
  A list of `Itinerary` objects.
  """
  nodes: [Itinerary!]!

  """
  A list of edges which contains the `Itinerary` and cursor to aid in pagination.
  """
  edges: [ItinerariesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Itinerary` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Itinerary` edge in the connection.
"""
type ItinerariesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Itinerary` at the end of the edge.
  """
  node: Itinerary!
}

"""
Methods to use when ordering `Itinerary`.
"""
enum ItinerariesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  DURATION_ASC
  DURATION_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Itinerary` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ItineraryCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `title` field.
  """
  title: String

  """
  Checks for equality with the object’s `duration` field.
  """
  duration: String

  """
  Checks for equality with the object’s `description` field.
  """
  description: String

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime
}

"""
A connection to a list of `Pois` values.
"""
type PoisConnection {
  """
  A list of `Pois` objects.
  """
  nodes: [Pois!]!

  """
  A list of edges which contains the `Pois` and cursor to aid in pagination.
  """
  edges: [PoisEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Pois` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Pois` edge in the connection.
"""
type PoisEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Pois` at the end of the edge.
  """
  node: Pois!
}

"""
Methods to use when ordering `Pois`.
"""
enum PoisOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  INFO_ASC
  INFO_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  COORDINATES_ASC
  COORDINATES_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Pois` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PoisCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `title` field.
  """
  title: String

  """
  Checks for equality with the object’s `info` field.
  """
  info: String

  """
  Checks for equality with the object’s `description` field.
  """
  description: String

  """
  Checks for equality with the object’s `coordinates` field.
  """
  coordinates: String

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime
}

"""
A connection to a list of `Service` values.
"""
type ServicesConnection {
  """
  A list of `Service` objects.
  """
  nodes: [Service!]!

  """
  A list of edges which contains the `Service` and cursor to aid in pagination.
  """
  edges: [ServicesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Service` you could get from the connection.
  """
  totalCount: Int!
}

type Service implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  address: String
  openhours: String
  createdAt: Datetime!
  updatedAt: Datetime!
  servicetypeId: Int

  """
  Reads a single `Servicetype` that is related to this `Service`.
  """
  servicetype: Servicetype
}

type Servicetype implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  description: String
  image: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads and enables pagination through a set of `Service`.
  """
  services(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Service`.
    """
    orderBy: [ServicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceCondition
  ): ServicesConnection!
}

"""
Methods to use when ordering `Service`.
"""
enum ServicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  OPENHOURS_ASC
  OPENHOURS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  SERVICETYPE_ID_ASC
  SERVICETYPE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Service` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ServiceCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `address` field.
  """
  address: String

  """
  Checks for equality with the object’s `openhours` field.
  """
  openhours: String

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `servicetypeId` field.
  """
  servicetypeId: Int
}

"""
A `Service` edge in the connection.
"""
type ServicesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Service` at the end of the edge.
  """
  node: Service!
}

"""
A connection to a list of `Servicetype` values.
"""
type ServicetypesConnection {
  """
  A list of `Servicetype` objects.
  """
  nodes: [Servicetype!]!

  """
  A list of edges which contains the `Servicetype` and cursor to aid in pagination.
  """
  edges: [ServicetypesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Servicetype` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Servicetype` edge in the connection.
"""
type ServicetypesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Servicetype` at the end of the edge.
  """
  node: Servicetype!
}

"""
Methods to use when ordering `Servicetype`.
"""
enum ServicetypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  IMAGE_ASC
  IMAGE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Servicetype` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ServicetypeCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `description` field.
  """
  description: String

  """
  Checks for equality with the object’s `image` field.
  """
  image: String

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `Event`.
  """
  createEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventInput!
  ): CreateEventPayload

  """
  Creates a single `Itinerary`.
  """
  createItinerary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItineraryInput!
  ): CreateItineraryPayload

  """
  Creates a single `Picture`.
  """
  createPicture(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePictureInput!
  ): CreatePicturePayload

  """
  Creates a single `PoiItinerary`.
  """
  createPoiItinerary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePoiItineraryInput!
  ): CreatePoiItineraryPayload

  """
  Creates a single `Pois`.
  """
  createPois(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePoisInput!
  ): CreatePoisPayload

  """
  Creates a single `Service`.
  """
  createService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateServiceInput!
  ): CreateServicePayload

  """
  Creates a single `Servicetype`.
  """
  createServicetype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateServicetypeInput!
  ): CreateServicetypePayload

  """
  Updates a single `Event` using its globally unique id and a patch.
  """
  updateEventByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventByNodeIdInput!
  ): UpdateEventPayload

  """
  Updates a single `Event` using a unique key and a patch.
  """
  updateEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventInput!
  ): UpdateEventPayload

  """
  Updates a single `Itinerary` using its globally unique id and a patch.
  """
  updateItineraryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItineraryByNodeIdInput!
  ): UpdateItineraryPayload

  """
  Updates a single `Itinerary` using a unique key and a patch.
  """
  updateItinerary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItineraryInput!
  ): UpdateItineraryPayload

  """
  Updates a single `Picture` using its globally unique id and a patch.
  """
  updatePictureByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePictureByNodeIdInput!
  ): UpdatePicturePayload

  """
  Updates a single `Picture` using a unique key and a patch.
  """
  updatePicture(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePictureInput!
  ): UpdatePicturePayload

  """
  Updates a single `PoiItinerary` using its globally unique id and a patch.
  """
  updatePoiItineraryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePoiItineraryByNodeIdInput!
  ): UpdatePoiItineraryPayload

  """
  Updates a single `PoiItinerary` using a unique key and a patch.
  """
  updatePoiItinerary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePoiItineraryInput!
  ): UpdatePoiItineraryPayload

  """
  Updates a single `Pois` using its globally unique id and a patch.
  """
  updatePoisByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePoisByNodeIdInput!
  ): UpdatePoisPayload

  """
  Updates a single `Pois` using a unique key and a patch.
  """
  updatePois(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePoisInput!
  ): UpdatePoisPayload

  """
  Updates a single `Service` using its globally unique id and a patch.
  """
  updateServiceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceByNodeIdInput!
  ): UpdateServicePayload

  """
  Updates a single `Service` using a unique key and a patch.
  """
  updateService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceInput!
  ): UpdateServicePayload

  """
  Updates a single `Servicetype` using its globally unique id and a patch.
  """
  updateServicetypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServicetypeByNodeIdInput!
  ): UpdateServicetypePayload

  """
  Updates a single `Servicetype` using a unique key and a patch.
  """
  updateServicetype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServicetypeInput!
  ): UpdateServicetypePayload

  """
  Deletes a single `Event` using its globally unique id.
  """
  deleteEventByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventByNodeIdInput!
  ): DeleteEventPayload

  """
  Deletes a single `Event` using a unique key.
  """
  deleteEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventInput!
  ): DeleteEventPayload

  """
  Deletes a single `Itinerary` using its globally unique id.
  """
  deleteItineraryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItineraryByNodeIdInput!
  ): DeleteItineraryPayload

  """
  Deletes a single `Itinerary` using a unique key.
  """
  deleteItinerary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItineraryInput!
  ): DeleteItineraryPayload

  """
  Deletes a single `Picture` using its globally unique id.
  """
  deletePictureByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePictureByNodeIdInput!
  ): DeletePicturePayload

  """
  Deletes a single `Picture` using a unique key.
  """
  deletePicture(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePictureInput!
  ): DeletePicturePayload

  """
  Deletes a single `PoiItinerary` using its globally unique id.
  """
  deletePoiItineraryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePoiItineraryByNodeIdInput!
  ): DeletePoiItineraryPayload

  """
  Deletes a single `PoiItinerary` using a unique key.
  """
  deletePoiItinerary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePoiItineraryInput!
  ): DeletePoiItineraryPayload

  """
  Deletes a single `Pois` using its globally unique id.
  """
  deletePoisByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePoisByNodeIdInput!
  ): DeletePoisPayload

  """
  Deletes a single `Pois` using a unique key.
  """
  deletePois(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePoisInput!
  ): DeletePoisPayload

  """
  Deletes a single `Service` using its globally unique id.
  """
  deleteServiceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceByNodeIdInput!
  ): DeleteServicePayload

  """
  Deletes a single `Service` using a unique key.
  """
  deleteService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceInput!
  ): DeleteServicePayload

  """
  Deletes a single `Servicetype` using its globally unique id.
  """
  deleteServicetypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServicetypeByNodeIdInput!
  ): DeleteServicetypePayload

  """
  Deletes a single `Servicetype` using a unique key.
  """
  deleteServicetype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServicetypeInput!
  ): DeleteServicetypePayload
}

"""
The output of our create `Event` mutation.
"""
type CreateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Event` that was created by this mutation.
  """
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Pois` that is related to this `Event`.
  """
  poi: Pois

  """
  An edge for our `Event`. May be used by Relay 1.
  """
  eventEdge(
    """
    The method to use when ordering `Event`.
    """
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge
}

"""
All input for the create `Event` mutation.
"""
input CreateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Event` to be created by this mutation.
  """
  event: EventInput!
}

"""
An input for mutations affecting `Event`
"""
input EventInput {
  id: Int
  title: String
  info: String
  description: String
  createdAt: Datetime
  updatedAt: Datetime
  poiId: Int
}

"""
The output of our create `Itinerary` mutation.
"""
type CreateItineraryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Itinerary` that was created by this mutation.
  """
  itinerary: Itinerary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Itinerary`. May be used by Relay 1.
  """
  itineraryEdge(
    """
    The method to use when ordering `Itinerary`.
    """
    orderBy: [ItinerariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItinerariesEdge
}

"""
All input for the create `Itinerary` mutation.
"""
input CreateItineraryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Itinerary` to be created by this mutation.
  """
  itinerary: ItineraryInput!
}

"""
An input for mutations affecting `Itinerary`
"""
input ItineraryInput {
  id: Int
  title: String
  duration: String
  description: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
The output of our create `Picture` mutation.
"""
type CreatePicturePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Picture` that was created by this mutation.
  """
  picture: Picture

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Event` that is related to this `Picture`.
  """
  event: Event

  """
  Reads a single `Pois` that is related to this `Picture`.
  """
  poi: Pois

  """
  An edge for our `Picture`. May be used by Relay 1.
  """
  pictureEdge(
    """
    The method to use when ordering `Picture`.
    """
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PicturesEdge
}

"""
All input for the create `Picture` mutation.
"""
input CreatePictureInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Picture` to be created by this mutation.
  """
  picture: PictureInput!
}

"""
An input for mutations affecting `Picture`
"""
input PictureInput {
  id: Int
  url: String
  createdAt: Datetime
  updatedAt: Datetime
  eventId: Int
  poiId: Int
}

"""
The output of our create `PoiItinerary` mutation.
"""
type CreatePoiItineraryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `PoiItinerary` that was created by this mutation.
  """
  poiItinerary: PoiItinerary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Itinerary` that is related to this `PoiItinerary`.
  """
  itinerary: Itinerary

  """
  Reads a single `Pois` that is related to this `PoiItinerary`.
  """
  poi: Pois

  """
  An edge for our `PoiItinerary`. May be used by Relay 1.
  """
  poiItineraryEdge(
    """
    The method to use when ordering `PoiItinerary`.
    """
    orderBy: [PoiItinerariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiItinerariesEdge
}

"""
All input for the create `PoiItinerary` mutation.
"""
input CreatePoiItineraryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `PoiItinerary` to be created by this mutation.
  """
  poiItinerary: PoiItineraryInput!
}

"""
An input for mutations affecting `PoiItinerary`
"""
input PoiItineraryInput {
  order: Int
  createdAt: Datetime
  updatedAt: Datetime
  itineraryId: Int!
  poiId: Int!
}

"""
The output of our create `Pois` mutation.
"""
type CreatePoisPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Pois` that was created by this mutation.
  """
  pois: Pois

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Pois`. May be used by Relay 1.
  """
  poisEdge(
    """
    The method to use when ordering `Pois`.
    """
    orderBy: [PoisOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoisEdge
}

"""
All input for the create `Pois` mutation.
"""
input CreatePoisInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Pois` to be created by this mutation.
  """
  pois: PoisInput!
}

"""
An input for mutations affecting `Pois`
"""
input PoisInput {
  id: Int
  title: String
  info: String
  description: String
  coordinates: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
The output of our create `Service` mutation.
"""
type CreateServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Service` that was created by this mutation.
  """
  service: Service

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Servicetype` that is related to this `Service`.
  """
  servicetype: Servicetype

  """
  An edge for our `Service`. May be used by Relay 1.
  """
  serviceEdge(
    """
    The method to use when ordering `Service`.
    """
    orderBy: [ServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ServicesEdge
}

"""
All input for the create `Service` mutation.
"""
input CreateServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Service` to be created by this mutation.
  """
  service: ServiceInput!
}

"""
An input for mutations affecting `Service`
"""
input ServiceInput {
  id: Int
  name: String
  address: String
  openhours: String
  createdAt: Datetime
  updatedAt: Datetime
  servicetypeId: Int
}

"""
The output of our create `Servicetype` mutation.
"""
type CreateServicetypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Servicetype` that was created by this mutation.
  """
  servicetype: Servicetype

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Servicetype`. May be used by Relay 1.
  """
  servicetypeEdge(
    """
    The method to use when ordering `Servicetype`.
    """
    orderBy: [ServicetypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ServicetypesEdge
}

"""
All input for the create `Servicetype` mutation.
"""
input CreateServicetypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Servicetype` to be created by this mutation.
  """
  servicetype: ServicetypeInput!
}

"""
An input for mutations affecting `Servicetype`
"""
input ServicetypeInput {
  id: Int
  name: String
  description: String
  image: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
The output of our update `Event` mutation.
"""
type UpdateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Event` that was updated by this mutation.
  """
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Pois` that is related to this `Event`.
  """
  poi: Pois

  """
  An edge for our `Event`. May be used by Relay 1.
  """
  eventEdge(
    """
    The method to use when ordering `Event`.
    """
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge
}

"""
All input for the `updateEventByNodeId` mutation.
"""
input UpdateEventByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Event` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
}

"""
Represents an update to a `Event`. Fields that are set will be updated.
"""
input EventPatch {
  id: Int
  title: String
  info: String
  description: String
  createdAt: Datetime
  updatedAt: Datetime
  poiId: Int
}

"""
All input for the `updateEvent` mutation.
"""
input UpdateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
  id: Int!
}

"""
The output of our update `Itinerary` mutation.
"""
type UpdateItineraryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Itinerary` that was updated by this mutation.
  """
  itinerary: Itinerary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Itinerary`. May be used by Relay 1.
  """
  itineraryEdge(
    """
    The method to use when ordering `Itinerary`.
    """
    orderBy: [ItinerariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItinerariesEdge
}

"""
All input for the `updateItineraryByNodeId` mutation.
"""
input UpdateItineraryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Itinerary` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Itinerary` being updated.
  """
  patch: ItineraryPatch!
}

"""
Represents an update to a `Itinerary`. Fields that are set will be updated.
"""
input ItineraryPatch {
  id: Int
  title: String
  duration: String
  description: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
All input for the `updateItinerary` mutation.
"""
input UpdateItineraryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Itinerary` being updated.
  """
  patch: ItineraryPatch!
  id: Int!
}

"""
The output of our update `Picture` mutation.
"""
type UpdatePicturePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Picture` that was updated by this mutation.
  """
  picture: Picture

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Event` that is related to this `Picture`.
  """
  event: Event

  """
  Reads a single `Pois` that is related to this `Picture`.
  """
  poi: Pois

  """
  An edge for our `Picture`. May be used by Relay 1.
  """
  pictureEdge(
    """
    The method to use when ordering `Picture`.
    """
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PicturesEdge
}

"""
All input for the `updatePictureByNodeId` mutation.
"""
input UpdatePictureByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Picture` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Picture` being updated.
  """
  patch: PicturePatch!
}

"""
Represents an update to a `Picture`. Fields that are set will be updated.
"""
input PicturePatch {
  id: Int
  url: String
  createdAt: Datetime
  updatedAt: Datetime
  eventId: Int
  poiId: Int
}

"""
All input for the `updatePicture` mutation.
"""
input UpdatePictureInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Picture` being updated.
  """
  patch: PicturePatch!
  id: Int!
}

"""
The output of our update `PoiItinerary` mutation.
"""
type UpdatePoiItineraryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `PoiItinerary` that was updated by this mutation.
  """
  poiItinerary: PoiItinerary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Itinerary` that is related to this `PoiItinerary`.
  """
  itinerary: Itinerary

  """
  Reads a single `Pois` that is related to this `PoiItinerary`.
  """
  poi: Pois

  """
  An edge for our `PoiItinerary`. May be used by Relay 1.
  """
  poiItineraryEdge(
    """
    The method to use when ordering `PoiItinerary`.
    """
    orderBy: [PoiItinerariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiItinerariesEdge
}

"""
All input for the `updatePoiItineraryByNodeId` mutation.
"""
input UpdatePoiItineraryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PoiItinerary` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PoiItinerary` being updated.
  """
  patch: PoiItineraryPatch!
}

"""
Represents an update to a `PoiItinerary`. Fields that are set will be updated.
"""
input PoiItineraryPatch {
  order: Int
  createdAt: Datetime
  updatedAt: Datetime
  itineraryId: Int
  poiId: Int
}

"""
All input for the `updatePoiItinerary` mutation.
"""
input UpdatePoiItineraryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PoiItinerary` being updated.
  """
  patch: PoiItineraryPatch!
  itineraryId: Int!
  poiId: Int!
}

"""
The output of our update `Pois` mutation.
"""
type UpdatePoisPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Pois` that was updated by this mutation.
  """
  pois: Pois

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Pois`. May be used by Relay 1.
  """
  poisEdge(
    """
    The method to use when ordering `Pois`.
    """
    orderBy: [PoisOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoisEdge
}

"""
All input for the `updatePoisByNodeId` mutation.
"""
input UpdatePoisByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pois` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Pois` being updated.
  """
  patch: PoisPatch!
}

"""
Represents an update to a `Pois`. Fields that are set will be updated.
"""
input PoisPatch {
  id: Int
  title: String
  info: String
  description: String
  coordinates: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
All input for the `updatePois` mutation.
"""
input UpdatePoisInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Pois` being updated.
  """
  patch: PoisPatch!
  id: Int!
}

"""
The output of our update `Service` mutation.
"""
type UpdateServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Service` that was updated by this mutation.
  """
  service: Service

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Servicetype` that is related to this `Service`.
  """
  servicetype: Servicetype

  """
  An edge for our `Service`. May be used by Relay 1.
  """
  serviceEdge(
    """
    The method to use when ordering `Service`.
    """
    orderBy: [ServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ServicesEdge
}

"""
All input for the `updateServiceByNodeId` mutation.
"""
input UpdateServiceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Service` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Service` being updated.
  """
  patch: ServicePatch!
}

"""
Represents an update to a `Service`. Fields that are set will be updated.
"""
input ServicePatch {
  id: Int
  name: String
  address: String
  openhours: String
  createdAt: Datetime
  updatedAt: Datetime
  servicetypeId: Int
}

"""
All input for the `updateService` mutation.
"""
input UpdateServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Service` being updated.
  """
  patch: ServicePatch!
  id: Int!
}

"""
The output of our update `Servicetype` mutation.
"""
type UpdateServicetypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Servicetype` that was updated by this mutation.
  """
  servicetype: Servicetype

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Servicetype`. May be used by Relay 1.
  """
  servicetypeEdge(
    """
    The method to use when ordering `Servicetype`.
    """
    orderBy: [ServicetypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ServicetypesEdge
}

"""
All input for the `updateServicetypeByNodeId` mutation.
"""
input UpdateServicetypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Servicetype` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Servicetype` being updated.
  """
  patch: ServicetypePatch!
}

"""
Represents an update to a `Servicetype`. Fields that are set will be updated.
"""
input ServicetypePatch {
  id: Int
  name: String
  description: String
  image: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""
All input for the `updateServicetype` mutation.
"""
input UpdateServicetypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Servicetype` being updated.
  """
  patch: ServicetypePatch!
  id: Int!
}

"""
The output of our delete `Event` mutation.
"""
type DeleteEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Event` that was deleted by this mutation.
  """
  event: Event
  deletedEventNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Pois` that is related to this `Event`.
  """
  poi: Pois

  """
  An edge for our `Event`. May be used by Relay 1.
  """
  eventEdge(
    """
    The method to use when ordering `Event`.
    """
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge
}

"""
All input for the `deleteEventByNodeId` mutation.
"""
input DeleteEventByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Event` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEvent` mutation.
"""
input DeleteEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `Itinerary` mutation.
"""
type DeleteItineraryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Itinerary` that was deleted by this mutation.
  """
  itinerary: Itinerary
  deletedItineraryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Itinerary`. May be used by Relay 1.
  """
  itineraryEdge(
    """
    The method to use when ordering `Itinerary`.
    """
    orderBy: [ItinerariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItinerariesEdge
}

"""
All input for the `deleteItineraryByNodeId` mutation.
"""
input DeleteItineraryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Itinerary` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteItinerary` mutation.
"""
input DeleteItineraryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `Picture` mutation.
"""
type DeletePicturePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Picture` that was deleted by this mutation.
  """
  picture: Picture
  deletedPictureNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Event` that is related to this `Picture`.
  """
  event: Event

  """
  Reads a single `Pois` that is related to this `Picture`.
  """
  poi: Pois

  """
  An edge for our `Picture`. May be used by Relay 1.
  """
  pictureEdge(
    """
    The method to use when ordering `Picture`.
    """
    orderBy: [PicturesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PicturesEdge
}

"""
All input for the `deletePictureByNodeId` mutation.
"""
input DeletePictureByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Picture` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deletePicture` mutation.
"""
input DeletePictureInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `PoiItinerary` mutation.
"""
type DeletePoiItineraryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `PoiItinerary` that was deleted by this mutation.
  """
  poiItinerary: PoiItinerary
  deletedPoiItineraryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Itinerary` that is related to this `PoiItinerary`.
  """
  itinerary: Itinerary

  """
  Reads a single `Pois` that is related to this `PoiItinerary`.
  """
  poi: Pois

  """
  An edge for our `PoiItinerary`. May be used by Relay 1.
  """
  poiItineraryEdge(
    """
    The method to use when ordering `PoiItinerary`.
    """
    orderBy: [PoiItinerariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoiItinerariesEdge
}

"""
All input for the `deletePoiItineraryByNodeId` mutation.
"""
input DeletePoiItineraryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PoiItinerary` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deletePoiItinerary` mutation.
"""
input DeletePoiItineraryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  itineraryId: Int!
  poiId: Int!
}

"""
The output of our delete `Pois` mutation.
"""
type DeletePoisPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Pois` that was deleted by this mutation.
  """
  pois: Pois
  deletedPoisNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Pois`. May be used by Relay 1.
  """
  poisEdge(
    """
    The method to use when ordering `Pois`.
    """
    orderBy: [PoisOrderBy!] = [PRIMARY_KEY_ASC]
  ): PoisEdge
}

"""
All input for the `deletePoisByNodeId` mutation.
"""
input DeletePoisByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pois` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deletePois` mutation.
"""
input DeletePoisInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `Service` mutation.
"""
type DeleteServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Service` that was deleted by this mutation.
  """
  service: Service
  deletedServiceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Servicetype` that is related to this `Service`.
  """
  servicetype: Servicetype

  """
  An edge for our `Service`. May be used by Relay 1.
  """
  serviceEdge(
    """
    The method to use when ordering `Service`.
    """
    orderBy: [ServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ServicesEdge
}

"""
All input for the `deleteServiceByNodeId` mutation.
"""
input DeleteServiceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Service` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteService` mutation.
"""
input DeleteServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
The output of our delete `Servicetype` mutation.
"""
type DeleteServicetypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Servicetype` that was deleted by this mutation.
  """
  servicetype: Servicetype
  deletedServicetypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Servicetype`. May be used by Relay 1.
  """
  servicetypeEdge(
    """
    The method to use when ordering `Servicetype`.
    """
    orderBy: [ServicetypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ServicetypesEdge
}

"""
All input for the `deleteServicetypeByNodeId` mutation.
"""
input DeleteServicetypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Servicetype` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteServicetype` mutation.
"""
input DeleteServicetypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}
